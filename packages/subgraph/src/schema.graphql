type _Schema_
  @fulltext(
    name: "profileSearch"
    language: en
    algorithm: rank
    include: [
      {
        entity: "Profile"
        fields: [
          { name: "position" }
          { name: "category" }
          { name: "details" }
          { name: "skillsString" }
        ]
      }
    ]
  )

type Account @entity {
  id: Bytes!
  asERC721: ERC721Contract
  Profile: [Profile!]! @derivedFrom(field: "owner")
}

type ERC721Contract @entity(immutable: true) {
  id: Bytes!
  asAccount: Account!
  supportsMetadata: Boolean
  name: String
  symbol: String
  profiles: [Profile!]! @derivedFrom(field: "contract")
  # operators: [ERC721Operator!]! @derivedFrom(field: "contract")
  # transfers: [ERC721Transfer!]! @derivedFrom(field: "contract")
}

type Profile @entity {
  id: ID!
  contract: ERC721Contract!
  identifier: BigInt!
  owner: Account!
  uri: String!
  createdAt: BigInt!
  proposals: [Proposal!] @derivedFrom(field: "profile")

  # IPFS data
  position: String!
  category: String!
  country: String
  experience: BigInt!
  english: String!
  employmentTypes: [String!]!
  skills: [String!]
  skillsString: String
  details: String
}

type Proposal @entity {
  id: ID!
  contract: ERC721Contract!
  identifier: BigInt!
  owner: Account!
  uri: String!
  createdAt: BigInt!
  sender: Account!
  status: Int!
  profile: Profile

  #IPFS data
  name: String!
  position: String!
  company: String!
  message: String!
}

type EpnsNotificationCounter @entity {
  id: ID!
  totalCount: BigInt!
}

type EpnsPushNotification @entity {
  id: ID!
  notificationNumber: BigInt!
  recipient: String!
  notification: String!
}
